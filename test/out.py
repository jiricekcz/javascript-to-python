# This python file was generated by the javascript-to-python convertor.
# Github: https://github.com/jiricekcz/javascript-to-python
# Convertor author: https://github.com/jiricekcz
# Discord CDN link to original source: https://cdn.discordapp.com/attachments/816066387063341106/816072305184079872/source.js
class Number(float):
    def __init__(self, n):
        pass
    def toString(self):
        return String(self.valueOf())
    def valueOf(self):
        if int(self) == self: return int(self)
        return float(self)
    def toFixed(self, digits):
        return String(round(self, digits))
    def __add__(self, other): 
        if isinstance(other, Number): 
            return Number(self.valueOf() + other.valueOf())
        else: 
            return Number(other + self.valueOf())
    def __str__(self):
        return self.toString()
    def __index__(self):
        return int(self)
class String(str): 
    def __init__(self, value):
        pass
    def __add__(self, other):
        return String(str(self) + str(other))
    def charAt(self, pos):
        return self[pos]
    def charCodeAt(self, pos):
        return ord(self[pos])
    def concat(self, *others):
        r = self()
        for h in others:
            r += h
        return r
    def indexOf(self, sub, start = 0):
        l = len(self)
        ls = len(sub)
        while start < l - ls:
            if (self[start:start + ls] == sub): return start
            start += 1
        return Number(-1)
    def lastIndexOf(self, sub, start = "h"):
        l = len(self)
        ls = len(sub)
        if (start == "h"): start = ls - l
        while start > 0:
            if (self[start:start + ls] == sub): return start
            start -= 1
        return Number(-1)
    def replace(self, old, new):
        return String(self.replace(old, new, 1))
    def slice(self, start, end):
        return String(self[start:end])
    def split(self, sep):
        if sep == "": return Array(*list(str(self)))
        return Array(str(self).split(sep))
    def substring(self, start, end): 
        return String(self.slice(start, end))
    def toLowerCase(self):
        return String(self.lower())
    def toUpperCase(self):
        return String(self.upper())
    def trim(self):
        return String(self.strip())
    def valueOf(self):
        return str(self)
    def startsWith(self, symbol):
        l = len(symbol)
        return self.slice(0,l) == symbol

class Array(list):
    def __init__(self, *l): 
        super().__init__(l)
        self.__update()
    def __update(self):
        self.length = len(self)
    def join(self, separator):
        x = separator.join(self)
        self.__update()
        return x 
    def toString(self):
        x = self.join(',')
        self.__update()
        return x
    def push(self, *elements):
        for element in elements:
            self.append(element)
        self.__update()
    def concat(self, array):
        for x in array:
            self.push(x)
    def reverse(self):
        self.reverse()
        self.__update()
        return self
    def shift(self):
        x = self.pop(0)
        self.__update()
        return x
    def slice(self, start, stop):
        return Array(*self[start:stop])
    def __swap(self, index1, index2):
        t = self[index1]
        self[index1] = self[index2]
        self[index2] = t
        self.__update()
    def sort(self, compareFunction):
        def sort(left, right):
            def p(pivot, left, right):
                si = left
                pivotValue = self[pivot]
                self.__swap(pivot, right)
                v = left
                while (v < right):
                    if (compareFunction(self[v], pivotValue) < 0):
                        self.__swap(v, si)
                        si+=1
                    v+=1
                self.__swap(right, si)
                return si
            piv = None
            if (left < right):
                piv = left + math.ceil((right - left) * 0.5)
                newPiv = p(piv, left, right)
                sort(left, newPiv - 1)
                sort(newPiv + 1, right) 
        sort(0, self.length - 1)
        self.__update()
        return self
    def splice(self, start, deleteCount):
        h = self[start:Number(start + deleteCount)]
        del self[start:Number(start + deleteCount)]
        self.__update()
        return h
    def unshift(self, *elements):
        for element in elements:
            self.insert(0, element)
        self.__update()
    def indexOf(self, element):
        self.index(element)
    def lastIndexOf(self, element):
        i = len(self) - 1
        while i > 0:
            if (element == self[i]): return i
    def every(self, condition):
        i = 0
        while i < len(self) - 1:
            if (not self.__callElementCallback(condition, self[i], i, self)): return False
            i+=1
        return True
    def some(self, condition):
        i = 0
        while i < len(self) - 1:
            if (self.__callElementCallback(condition, self[i], i, self)): return True
            i+=1
        return False
    def __callElementCallback(self, callback, element, index, array):
        if (callback.__defaults__ is not None): argCount = callback.__code__.co_argcount - len(callback.__defaults__)
        if (callback.__defaults__ is None): argCount = callback.__code__.co_argcount
        if (argCount == 0):
            return callback()
        if (argCount == 1):
            return callback(element)
        if (argCount == 2):
            return callback(element, index)
        if (argCount == 3):
            return callback(element, index, array)
        
    def forEach(self, callback):
        i = 0
        while i < len(self) - 1:
            self.__callElementCallback(callback, self[i], i, self)
            i+=1
    def filter(self, callback):
        h = []
        i = 0
        while i < len(self) - 1:
            if (self.__callElementCallback(callback, self[i], i, self)): h.append(self[i])
            i+=1
        return Array(*h)
    def map(self, callback):
        h = []
        i = 0
        while i < len(self):
            h.append(self.__callElementCallback(callback, self[i], i, self))
            i+=1
        return Array(*h)
    def includes(self, element):
        for i in self:
            if (i == element): return True
        return False
    def reduce(self, callback):
        a = 0
        for x in self:
            a = callback(a, x)
        return a
import math
def ljvjevzliqhesfovgumomlvhgovfxghi(v): return Animal(v)
def usmejpngkqdskrektzvdmuwfkmniizih(v): return Animal(v)
def yzhrlzvnhekruhmrksjkvtdjeuckvpjp(v): return v.id
def wojsvwzyfddwqzxiiupsfjngpkodxiru(v): return (v.id==String("tiger"))
def qqgkmttvzglvzuxdfoitjllzlnzzttsu(v): return v.id
def dpszftzzfwrjdhomtpmxdilxjwyicxqi(v): return v.id
def fsthhmtfgifpdgogigeljyhneqdzhkyu(v,i): return ((i%Number(2))==Number(0))
def mjnsyjfmjzvrogfgmvqwwnqtxxsdioxe(v): return v.id
def frlpljffsqdntwnlqimolhoolwrxgkzp(v): return v.id.toLowerCase().startsWith(String("l"))
def ufeyvjwwhnevoeeiycqjiwjymudjdomy(v): return v.id
def pxyydwtizhtxxevgvskyzvqujeelpxkv(v): return v.id.toLowerCase().startsWith(String("l"))
def dktfzspvjluqccvvvecfxvzzthrdukpp(v): return v.id
def uymnypymhfkzezqyvepuqrgquzzzkrml(v): return v.id
def jhxnyrmphtwgghlopvmgfyiphqhqckzq(v): return v.id.toLowerCase().startsWith(l)
def zrdljehhzsrdxxexwmwvsppztjqqvlip(v): return v.id
def klxnlrtwnhktkjnoyvidotryijewscie(v): return v.id.toLowerCase().startsWith(l)
def xcndtgprrihxlihkwetxzmpmoyjtksix(v): return v.id
def qojsfqliojeuujvwzoknmykvngyodkuj(v): return v.id
def xfmctppmsifxwhyyimmlywznoodimugu(v): return v.id
class Animal:
    def __init__(self, id):
        self.id=id
    def toString(self, ):
        return (String("Animal: ")+self.id)
animals=Array(String("lovebird"),String("bison"),String("prairie dog"),String("chimpanzee"),String("pig"),String("bighorn"),String("capybara"),String("fawn"),String("armadillo"),String("wolf"),String("dromedary"),String("aoudad"),String("monkey"),String("guanaco"),String("guanaco"),String("ape"),String("doe"),String("bumble bee"),String("iguana"),String("highland cow"),String("snowy owl")).map(ljvjevzliqhesfovgumomlvhgovfxghi)
animals2=Array(String("tiger"),String("elephant"),String("tiger"),String("lion"),String("locust"),String("lion"),String("eagle"),String("elephant"),String("echidna"),String("eagle"),String("robin"),String("chimpanzee"),String("sloth"),String("crow"),String("locust"),String("dolphin"),String("gorilla"),String("wolf"),String("lovebird"),String("owl"),String("ostrich"),String("badger"),String("anteater"),String("kookaburra")).map(usmejpngkqdskrektzvdmuwfkmniizih)
print((String("2)\n     ")+animals.map(yzhrlzvnhekruhmrksjkvtdjeuckvpjp)))
print((String("3)\n     ")+animals.filter(wojsvwzyfddwqzxiiupsfjngpkodxiru).length))
print((String("4)\n     ")+animals[Number(2)].id))
print((String("5)\n     ")+animals[Number((animals.length-Number(2)))].id))
print((String("6)\n     ")+animals.slice(Number(0),Number(10)).map(qqgkmttvzglvzuxdfoitjllzlnzzttsu)))
print((String("7)\n     ")+animals.slice(Number((animals.length-Number(5))),Number(animals.length)).map(dpszftzzfwrjdhomtpmxdilxjwyicxqi)))
print((String("8)\n     ")+animals.filter(fsthhmtfgifpdgogigeljyhneqdzhkyu).map(mjnsyjfmjzvrogfgmvqwwnqtxxsdioxe)))
print((String("9)\n     ")+animals.filter(frlpljffsqdntwnlqimolhoolwrxgkzp).map(ufeyvjwwhnevoeeiycqjiwjymudjdomy)))
print((String("10)\n     ")+animals.filter(pxyydwtizhtxxevgvskyzvqujeelpxkv).map(dktfzspvjluqccvvvecfxvzzthrdukpp)))
print(String("11)"))
max=Number(0)
maxL=Number(0)
maxLastIndex=Number(0)
i=Number(0)
while (i<animals.length):
    if animals[Number(i)].id.toLowerCase().startsWith(String("l")):
        maxL+=1
    else:
        if (maxL!=Number(0)):print((String("     Starting with L streak: ")+maxL))
        maxL=Number(0)
    if (max<maxL):
        max=maxL
        maxLastIndex=(i+Number(1))
    i+=1
print((String("     Max streak: ")+max),maxLastIndex)
print((String("12)\n     ")+animals.slice(Number((maxLastIndex-max)),Number(maxLastIndex)).map(uymnypymhfkzezqyvepuqrgquzzzkrml)))
lastL=animals[Number(0)].id.charAt(Number(0))
maxLe=Number(1)
maxLen=Number(1)
i=Number(1)
while (i<animals.length):
    if animals[Number(i)].id.startsWith(lastL):maxLe+=1
    else:
        if (maxLen<maxLe):maxLen=maxLe
        maxLe=Number(1)
        lastL=animals[i].id.charAt(Number(0))
    i+=1
print((String("13)\n     ")+maxLen))
print(String("14)"))
def printStartingWith(l):
    print(((String("     ")+l)+String(":")),animals.filter(jhxnyrmphtwgghlopvmgfyiphqhqckzq).map(zrdljehhzsrdxxexwmwvsppztjqqvlip))
for l in String("dikobraz").split(String("")):
    printStartingWith(l)
print(String("15)"))
def printStartingWith(l):
    print(((String("     ")+l)+String(":")),animals.filter(klxnlrtwnhktkjnoyvidotryijewscie).map(xcndtgprrihxlihkwetxzmpmoyjtksix))
for l in String("abcdefghijklmnopqrstuvwxyz").split(String("")):
    printStartingWith(l)
print((String("16)\n     ")+Array(*animals,*animals2).map(qojsfqliojeuujvwzoknmykvngyodkuj)))
print((String("17)\n     ")+Array(*animals.slice(Number(0),Number((animals.length/Number(3)))),*animals2.slice(Number(((Number(2)*animals.length)/Number(3))),animals.length)).map(xfmctppmsifxwhyyimmlywznoodimugu)))